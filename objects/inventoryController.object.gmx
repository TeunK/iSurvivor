<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inventory = ds_map_create();
inventory_size = 8;
max_inventory_size = 64;

quickbar = ds_map_create();
quickbar_size = 4;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

var slot_size = 40;
var margin = 4;
var quickbar_y0 = room_height-slot_size-margin;
var quickbar_y1 = quickbar_y0 + slot_size;
for (i=0; i&lt;quickbar_size; i++) {
    x0 = (room_width/2) - (0.5*quickbar_size*(slot_size+margin)) + (slot_size+margin)*i;
    x1 = x0 + slot_size;
    
    draw_set_color(c_white);
    draw_roundrect_ext(x0,quickbar_y0,x1,quickbar_y1,5,5,1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var inventory_width = 600;
var inventory_height = 400;
var view_center_x = view_xview[0] + 0.5*view_wport[0];
var view_center_y = view_yview[0] + 0.5*view_hport[0];
var x0 = view_center_x - 0.5*inventory_width;
var y0 = view_center_y - 0.5*inventory_height;
var x1 = view_center_x + 0.5*inventory_width;
var y1 = view_center_y + 0.5*inventory_height;

var menu_height = 30;
var navigator_width = 140;

var slot_size = 40;
var margin = 4;
var inventory_content_x0 = x0 + navigator_width + margin + 10;
var inventory_content_y0 = y0 + menu_height + margin;
var slots_per_row = floor((inventory_width - navigator_width) / (slot_size + margin))

if (keyboard_check(vk_tab)) {
    draw_set_color(c_black);
    draw_roundrect(x0,y0,x1,y1,0);
    draw_set_color(c_white);
    draw_roundrect(x0,y0,x1,y1,1);
    
    draw_text(x0+10,y0+10,"INVENTORY");
    
    for (i=0; i&lt;max_inventory_size; i++) {
        var slot_x0 = inventory_content_x0 + ((i % slots_per_row) * (slot_size + margin))
        var slot_y0 = inventory_content_y0 + (floor(i / slots_per_row) * (slot_size + margin))
        var slot_x1 = slot_x0 + slot_size;
        var slot_y1 = slot_y0 + slot_size;
        
        if (i &lt; inventory_size) {
            draw_set_alpha(1);
        } else {
            draw_set_alpha(0.2);
        }
        
        draw_roundrect_ext(slot_x0, slot_y0, slot_x1, slot_y1, 5,5,1);
    }
    draw_set_alpha(1);
}

if (keyboard_check_pressed(vk_backspace)) {
    inventory_size++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
