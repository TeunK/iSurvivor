<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>size = 2;
allowedDistance = 180;
nearDistance = 40;
movespeed = 4;

particle_system = part_system_create();
particle1 = part_type_create();
emitter1 = part_emitter_create(particle_system);
part_type_shape(particle1,pt_shape_disk);
part_type_size(particle1,0.02,0.08,0,0);
part_type_scale(particle1,1,1);
part_type_color1(particle1,16777215);
part_type_alpha1(particle1,0.08);
part_type_speed(particle1,0.30,0.80,0,1);
part_type_direction(particle1,0,359,0,0);
part_type_gravity(particle1,0,270);
part_type_orientation(particle1,0,0,0,0,1);
part_type_blend(particle1,1);
part_type_life(particle1,5,15);
part_emitter_region(particle_system,emitter1,x,x,y,y,ps_shape_ellipse,1);
part_emitter_stream(particle_system,emitter1,particle1,5);


target_x = undefined;
target_y = undefined;
target = undefined;
state = "idle";
findNewSpotResetTime = 2*room_speed;
findNewSpot = findNewSpotResetTime;

messageInstance = undefined;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tempspeed = undefined;

// DEDUCE STATE
if (instance_exists(spaceCandy)) {
    target = nearest_unchased_instance(x,y,spaceCandy);
    if (distance_between_objects(Player,target) &lt; allowedDistance) {
        changeState("hunting");
        target.chasedByCatcherId = self;
    } else if (distance_to_object(Player) &gt; nearDistance) {
        changeState("chasing player");
    } else {
        changeState("idle");
    }
} else {
    if (distance_to_object(Player) &gt; nearDistance) {
        changeState("chasing player");
    } else {
        changeState("idle");
    }
}

// DECIDE NEXT MOVE DEPENDING ON STATE
if (state == "hunting") {
    target_x = target.x;
    target_y = target.y;
    tempspeed = movespeed;
    if (distance_to_object(target) &lt;= tempspeed) {
        with (target) {
            pickupItem(self,1,other);
            instance_destroy();
        }
    }
} else if (state == "idle") {
    findNewSpot--;
    tempspeed = 0.25 * movespeed;
    if (is_undefined(target_x) || is_undefined(target_y) || findNewSpot &lt;=0) {
        target_x = Player.x - 0.5*nearDistance + random(nearDistance);
        target_y = Player.y - (Player.sprite_height) - nearDistance + random(0.5*nearDistance);
        findNewSpot = findNewSpotResetTime;
    }
} else if (state == "chasing player") {
    tempspeed = Player.MOVESPEED;
    target_x = Player.x - 0.5*nearDistance + random(nearDistance);
    target_y = Player.y - (Player.sprite_height) - nearDistance + random(0.5*nearDistance);
}

// MAKE THE MOVE
if (state = "idle" &amp;&amp; distance_to_point(target_x,target_y) &lt; tempspeed) {
    vspeed = 0;
    hspeed = 0;
} else {
    move_towards_point(target_x,target_y,tempspeed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_emitter_region(particle_system,emitter1,x,x,y,y,ps_shape_ellipse,1);

draw_set_color(c_white);
draw_rectangle(x-0.5*size,y-0.5*size,x+0.5*size,y+0.5*size,1);

if (!is_undefined(target) &amp;&amp; instance_exists(target)) {
    draw_set_alpha(0.1);
    if (!is_undefined(target.chasedByCatcherId)) {
        if (target.chasedByCatcherId == self) {
            draw_set_color(c_lime);
        } else {
            draw_set_color(c_red);
        }
    } else {
        draw_set_color(c_white);
    }
    draw_line(x,y,target.x,target.y)
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
